services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: plant_mysql
    environment:
      MYSQL_ROOT_PASSWORD: plantapp123
      MYSQL_DATABASE: demo3
      MYSQL_USER: plantuser
      MYSQL_PASSWORD: plantpass123
    profiles: ["system"]
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - plant_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: plant_backend
    profiles: ["system"]
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=mysql
      - DB_NAME=demo3
      - DB_USER=plantuser
      - DB_PASS=plantpass123
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
      - ./shared_assets:/usr/src/app/shared_assets
    networks:
      - plant_network
    restart: unless-stopped

  # Web Frontend
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=https://plantdb-api.top10.id.vn
    container_name: plant_frontend
    profiles: ["system"]
    depends_on:
      - backend
    volumes:
      - ./shared_assets:/usr/share/nginx/html/shared_assets
    networks:
      - plant_network
    restart: unless-stopped

  # Reverse Proxy (Nginx)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
      args:
        PRIMARY_DOMAIN_NAME: plantdb.top10.id.vn
        API_DOMAIN_NAME: plantdb-api.top10.id.vn
    container_name: plant_nginx
    profiles: ["system"]
    ports:
      # Map host ports for the two server names to container ports
      # Bind host port 80 to nginx container port 80 for HTTP (redirects to HTTPS)
      # Bind host port 443 to nginx container port 443 for HTTPS
      - "80:80"
      - "443:443"
    volumes:
      - "/etc/letsencrypt:/etc/nginx/certs/letsencrypt:ro"
      - "/var/www/certbot:/var/www/certbot:ro"
    depends_on:
      - backend
      - frontend
    networks:
      - plant_network
    restart: unless-stopped

  # Database Administration
  adminer:
    image: adminer:4.8.1
    container_name: plant_adminer
    profiles: ["system"]
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - plant_network
    restart: unless-stopped
    environment:
      - ADMINER_DEFAULT_SERVER=mysql
  
  certbot-init:
    image: certbot/certbot:v4.0.0
    container_name: certbot-init
    profiles: ["certbot-init"]
    command: >
      certonly --webroot -w /var/www/certbot
      --email Tinnt@podsoft.com.vn
      -d plantdb.top10.id.vn
      -d plantdb-api.top10.id.vn
      --rsa-key-size 4096
      --agree-tos
      --staple-ocsp
      --preferred-challenges http
      --no-eff-email
      --non-interactive
      --keep-until-expiring
      --expand
    restart: no
    volumes:
      - "/etc/letsencrypt:/etc/letsencrypt"
      - "/var/www/certbot:/var/www/certbot"
    networks:
      - certbot-network
    depends_on:
      # nginx-certbot-challenges:
      #   condition: service_healthy
      - nginx-certbot-challenges

  # certbot-renew:
  #   image: certbot/certbot:v4.0.0
  #   container_name: certbot-renew
  #   profiles: ["certbot-renew"]
  #   command: renew --webroot -w /var/www/certbot --noninteractive
  #   restart: no
  #   volumes:
  #     - "/etc/letsencrypt:/etc/letsencrypt"
  #     - "/var/www/certbot:/var/www/certbot"
  #   networks:
  #     - certbot-network

  nginx-certbot-challenges:
    image: nginx:stable-alpine3.20
    container_name: nginx-certbot-challenges
    profiles: ["certbot-init"]
    restart: no
    ports:
      - "80:80"
    volumes:
      - "/var/www/certbot:/var/www/certbot:ro"
      - "./nginx-certbot-challenges/default.conf:/etc/nginx/conf.d/default.conf"
      - "./nginx-certbot-challenges/nginx.conf:/etc/nginx/nginx.conf"
    networks:
      - certbot-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost/index.html"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

volumes:
  mysql_data:
    driver: local
  shared_assets:
    driver: local

networks:
  plant_network:
    driver: bridge
  certbot-network:
    driver: bridge
